{"name":"Susanoo","tagline":"Lightweight Semi-Automatic ORM","body":"Susano'o\r\n====\r\nA simple, fast, fluently structured library that takes the pain out of writing ADO.NET by eliminating boiler plate code and providing SQL result mappings to strongly-typed objects with no attributing or baseclass/interface, just pure POCOs and fast! \r\n\r\n#####Usage\r\n```csharp\r\nvar command = CommandManager\r\n    .DefineCommand(@\"SELECT Id, FirstName, LastName \r\n                     FROM Customers\r\n                     WHERE HasStoreCard = @HasStoreCard\", CommandType.Text)\r\n    .DefineResults<Customer>()\r\n    .Finalize();\r\n```\r\n```csharp\r\nusing (var databaseManager = new DatabaseManager(\"DepartmentStoreConnectionString\"))\r\n{\r\n    IEnumerable<Customer> customers =\r\n        command.Execute(databaseManager, new { HasStoreCard = true });\r\n}\r\n```\r\n\r\n#####How does it work?\r\nSusanoo uses Linq expression trees to dynamically write and compile code to map your objects before the command ever executes, leaving your SQL calls unaffected.\r\n\r\n#####Debugging Susanoo\r\n\r\nDebugging symbols are hosted at [SymbolSource](http://www.symbolsource.org/MyGet/Metadata/susanoo/Project/Susanoo.Core).\r\nA guide on adding the symbol server to Visual Studio is available [here](http://www.symbolsource.org/Public/Wiki/Using).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}